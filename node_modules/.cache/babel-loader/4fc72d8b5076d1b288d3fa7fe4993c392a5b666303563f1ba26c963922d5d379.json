{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Fragen erstellen\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"fragestellung\"\n}, \"Fragestellung:\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"antworten\"\n}, \"Antwortoptionen:\", -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_6 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"form\", null, [_createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    id: \"fragestellung\",\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.frageFragestellung = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.frageFragestellung]])]), _hoisted_3, _createElementVNode(\"div\", null, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    id: \"antworten\",\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.frageAntwortoptionen = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.frageAntwortoptionen]])]), _hoisted_5, _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $setup.addFrage()),\n    disabled: $setup.addingFrage\n  }, \"Frage hinzufügen\", 8 /* PROPS */, _hoisted_6)]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = $event => (this.$router.push('/umfrageWurdeErstellt'), $setup.sessionReset()))\n  }, \"Fertig (SessionStorage löschen!)\")]);\n}","map":{"version":3,"names":["_createElementVNode","for","_createElementBlock","_hoisted_1","_hoisted_2","id","type","$setup","frageFragestellung","$event","required","_hoisted_3","_hoisted_4","frageAntwortoptionen","_hoisted_5","onClick","_cache","addFrage","disabled","addingFrage","_hoisted_6","$router","push","sessionReset"],"sources":["/Users/aleks/Desktop/Git-Projects/Project-2/src/views/FragenErstellen.vue"],"sourcesContent":["<template>\n      <div>\n    <h1>Fragen erstellen</h1>\n    <form>\n      <div>\n        <label for=\"fragestellung\">Fragestellung:</label>\n        <input id=\"fragestellung\" type=\"text\" v-model=\"frageFragestellung\" required>\n      </div>\n      <br>\n      <div>\n        <label for=\"antworten\">Antwortoptionen:</label>\n        <input id=\"antworten\" type=\"text\" v-model=\"frageAntwortoptionen\" required>\n      </div>\n      <br>\n      <button @click=\"addFrage()\" :disabled=\"addingFrage\">Frage hinzufügen</button>\n    </form>\n\n    <button  @click=\"this.$router.push('/umfrageWurdeErstellt'), sessionReset()\">Fertig (SessionStorage löschen!)</button>\n  </div>\n</template>\n\n<script setup>\n  import { ref, computed, onMounted, resolveDirective } from 'vue'\n  import { doc, addDoc, collection, setDoc} from 'firebase/firestore';\n  import { db } from '@/firebase'\n  const umfragenCollectionRef = collection(db, 'AlleUmfragen', sessionStorage.getItem('EMailAdmin'), 'Umfragen')\n  const frageFragestellung = ref('')\n  const frageAntwortoptionen = ref('')\n  const addingFrage = ref(false)\n\n  const addFrage = async () => {\n    addingFrage.value = true\n    try {\n      console.log(\"\")\n      const umfrageDocRef = doc(umfragenCollectionRef, sessionStorage.getItem('umfragenName'))\n      const fragenCollectionRef = collection(umfrageDocRef, 'Fragen')\n      console.log(\"FragenCollectionRef: \" + fragenCollectionRef)\n      const optionsArray = frageAntwortoptionen.value.split(';').map(option => option.trim());\n      await addDoc(fragenCollectionRef, {\n        question: frageFragestellung.value,\n        options: optionsArray,\n        selected: []\n      })\n    } catch (error) {\n      console.error(error)\n    } finally {\n      addingFrage.value = false\n    }\n    frageFragestellung.value = ''\n    frageAntwortoptionen.value = ''\n  }\n/*\n  const addFrage = async () => {\n    const selected = []\n    console.log(\"\")\n    const umfrageDocRef = doc(umfragenCollectionRef, sessionStorage.getItem('umfragenName'))\n        const fragenCollectionRef = collection(umfrageDocRef, 'Fragen')\n        console.log(\"FragenCollectionRef: \" + fragenCollectionRef)\n        await addDoc(fragenCollectionRef, {\n           question: frageFragestellung.value,\n           options: frageAntwortoptionen.value,\n           selected: selected\n        })\n    }\n*/\n    const sessionReset = () => {\n        sessionStorage.removeItem('umfragenName')\n    }\n    \n</script>"],"mappings":";;gCAEIA,mBAAA,CAAyB,YAArB,kBAAgB;gCAGhBA,mBAAA,CAAiD;EAA1CC,GAAG,EAAC;AAAe,GAAC,gBAAc;gCAG3CD,mBAAA,CAAI;gCAEFA,mBAAA,CAA+C;EAAxCC,GAAG,EAAC;AAAW,GAAC,kBAAgB;gCAGzCD,mBAAA,CAAI;;;uBAZJE,mBAAA,CAiBE,cAhBJC,UAAyB,EACzBH,mBAAA,CAYO,eAXLA,mBAAA,CAGM,cAFJI,UAAiD,E,gBACjDJ,mBAAA,CAA4E;IAArEK,EAAE,EAAC,eAAe;IAACC,IAAI,EAAC,MAAM;+DAAUC,MAAA,CAAAC,kBAAkB,GAAAC,MAAA;IAAEC,QAAQ,EAAR;iDAApBH,MAAA,CAAAC,kBAAkB,E,KAEnEG,UAAI,EACJX,mBAAA,CAGM,cAFJY,UAA+C,E,gBAC/CZ,mBAAA,CAA0E;IAAnEK,EAAE,EAAC,WAAW;IAACC,IAAI,EAAC,MAAM;+DAAUC,MAAA,CAAAM,oBAAoB,GAAAJ,MAAA;IAAEC,QAAQ,EAAR;iDAAtBH,MAAA,CAAAM,oBAAoB,E,KAEjEC,UAAI,EACJd,mBAAA,CAA6E;IAApEe,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAP,MAAA,IAAEF,MAAA,CAAAU,QAAQ;IAAKC,QAAQ,EAAEX,MAAA,CAAAY;KAAa,kBAAgB,iBAAAC,UAAA,E,GAGtEpB,mBAAA,CAAsH;IAA5Ge,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAP,MAAA,UAAOY,OAAO,CAACC,IAAI,2BAA2Bf,MAAA,CAAAgB,YAAY;KAAI,kCAAgC,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}