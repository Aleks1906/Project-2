{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, onMounted, resolveDirective } from 'vue';\nimport { collection, onSnapshot, doc, updateDoc, FieldValue, arrayUnion, getFirestore } from 'firebase/firestore';\nimport { db } from '@/firebase';\nexport default {\n  __name: 'BeantwortenView',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const questions = ref([{}]);\n    const umfragenCollectionRef = collection(db, 'AlleUmfragen', sessionStorage.getItem('adminBeantworten'), 'Umfragen', sessionStorage.getItem('umfrageBeantworten'), 'Fragen');\n    //Wie greife ich auf EMailAdmin zu als normaler User?\n    //Wie greife ich auf Umfrage zur Kundenzufriedenheit zu?\n    const quizCompleted = ref(false);\n    const currentQuestion = ref(0);\n    onMounted(() => {\n      onSnapshot(umfragenCollectionRef, querySnapshot => {\n        const fbQuestions = [];\n        querySnapshot.forEach(doc => {\n          const frage = {\n            id: doc.id,\n            options: doc.data().options,\n            question: doc.data().question,\n            selected: doc.data().selected,\n            selectedLocal: null\n          };\n          frage.selected.push(null);\n          fbQuestions.push(frage);\n        });\n        questions.value = fbQuestions;\n      });\n    });\n    const getCurrentQuestion = computed(() => {\n      let question = questions.value[currentQuestion.value];\n      question.index = currentQuestion.value;\n      return question;\n    });\n    const SetAnswer = e => {\n      questions.value[currentQuestion.value].selectedLocal = e.target.value;\n      e.target.value = null;\n      //e.target.value müsste die Option sein, welche man anklickt\n    };\n\n    async function setSelected(id, auswahl, selectedArray) {\n      //Aktualisieren des zwischengespeicherten Arrays mit neuem Wert \n      selectedArray[selectedArray.length - 1] = auswahl;\n      //Dokument in Firebase mit aktualisierem Array überschreuben\n      await updateDoc(doc(umfragenCollectionRef, id), {\n        selected: selectedArray\n      });\n    }\n    const NextQuestion = () => {\n      if (currentQuestion.value < questions.value.length - 1) {\n        currentQuestion.value++;\n        return;\n      }\n      quizCompleted.value = true;\n    };\n\n    //Die Methoden ab hier müssten in die eigene Datei UmfragenAuswerten.vue\n    const countAnswers = () => {\n      let len = getCurrentQuestion.value.options.length;\n      let len2 = getCurrentQuestion.value.selected.length;\n      let arr = new Array(len);\n      for (let x = 0; x < len; x++) {\n        let count = 0;\n        for (let i = 0; i < len2; i++) {\n          if (getCurrentQuestion.value.selected[i] === x.toString()) {\n            count++;\n          }\n        }\n        arr[x] = count;\n      }\n      return arr;\n    };\n    const umfrageAuswerten = () => {\n      currentQuestion.value = 0;\n      let anzahlFragen = questions.value.length;\n      let ergebnis = [];\n      let ausgabe = \"\";\n      for (let x = 0; x < anzahlFragen; x++) {\n        let antworten = countAnswers();\n        ergebnis.push([...antworten]);\n        ausgabe = ausgabe + \" <br> <br> Frage \" + (x + 1) + \": \" + getCurrentQuestion.value.question + \"<br>Auswahlmöglichkeiten: \";\n        for (let z = 0; z < getCurrentQuestion.value.options.length; z++) {\n          ausgabe = ausgabe + \"<br>\" + getCurrentQuestion.value.options[z] + \", Anzahl ausgewählt: \" + ergebnis[x][z];\n        }\n        document.getElementById('auswertung').innerHTML = JSON.stringify(ausgabe);\n        NextQuestion();\n      }\n      currentQuestion.value = 0;\n      console.log(\"Ergebnis: \", ergebnis);\n      return ergebnis;\n    };\n    const __returned__ = {\n      questions,\n      umfragenCollectionRef,\n      quizCompleted,\n      currentQuestion,\n      getCurrentQuestion,\n      SetAnswer,\n      setSelected,\n      NextQuestion,\n      countAnswers,\n      umfrageAuswerten,\n      ref,\n      computed,\n      onMounted,\n      resolveDirective,\n      get collection() {\n        return collection;\n      },\n      get onSnapshot() {\n        return onSnapshot;\n      },\n      get doc() {\n        return doc;\n      },\n      get updateDoc() {\n        return updateDoc;\n      },\n      get FieldValue() {\n        return FieldValue;\n      },\n      get arrayUnion() {\n        return arrayUnion;\n      },\n      get getFirestore() {\n        return getFirestore;\n      },\n      get db() {\n        return db;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","resolveDirective","collection","onSnapshot","doc","updateDoc","FieldValue","arrayUnion","getFirestore","db","questions","umfragenCollectionRef","sessionStorage","getItem","quizCompleted","currentQuestion","querySnapshot","fbQuestions","forEach","frage","id","options","data","question","selected","selectedLocal","push","value","getCurrentQuestion","index","SetAnswer","e","target","setSelected","auswahl","selectedArray","length","NextQuestion","countAnswers","len","len2","arr","Array","x","count","i","toString","umfrageAuswerten","anzahlFragen","ergebnis","ausgabe","antworten","z","document","getElementById","innerHTML","JSON","stringify","console","log"],"sources":["/Users/aleks/Desktop/Git-Projects/Project-2/src/views/BeantwortenView.vue"],"sourcesContent":["<template>\r\n    <main class=\"app\">\r\n      <h1>Umfrage Kundenzufriedenheit</h1>\r\n      <section class=\"quiz\" v-if=\"!quizCompleted\">\r\n        <div class = \"quiz-info\">\r\n          <span class=\"question\">\r\n             {{ getCurrentQuestion.question }} \r\n          </span>\r\n          <div class=\"options\">\r\n            \r\n            <label \r\n                      v-for=\"(option, index) in getCurrentQuestion.options\" \r\n                      :for=\"'option' + index\" \r\n                      :class=\"`option ${\r\n                          getCurrentQuestion.selected[getCurrentQuestion.selected.length - 1] != null &&\r\n                          index != getCurrentQuestion.selected[getCurrentQuestion.selected.length - 1]\r\n                              ? 'disabled'\r\n                              : ''\r\n                      }`\">\r\n                      <input \r\n                          type=\"radio\" \r\n                          :id=\"'option' + index\" \r\n                          :name=\"getCurrentQuestion.index\" \r\n                          :value=\"index\" \r\n                          v-model=\"getCurrentQuestion.selected[getCurrentQuestion.selected.length - 1]\" \r\n                          :disabled=\"getCurrentQuestion.selected[getCurrentQuestion.selected.length - 1]\"\r\n                          @change=\"SetAnswer\" \r\n                      />\r\n                      <span>{{ option }}</span>\r\n                  </label>\r\n          </div>\r\n        </div>\r\n  \r\n        <button \r\n                  @click=\"setSelected(getCurrentQuestion.id, getCurrentQuestion.selectedLocal, getCurrentQuestion.selected), NextQuestion()\" \r\n                  :disabled=\"!getCurrentQuestion.selected\">\r\n                  {{ \r\n                      getCurrentQuestion.index == questions.length - 1 \r\n                          ? 'Finish' \r\n                          : getCurrentQuestion.selected == null\r\n                              ? 'Select an option'\r\n                              : 'Next question'\r\n                  }}\r\n              </button>\r\n        <!-- <h3>{{ getCurrentQuestion.selected }}</h3> -->\r\n      </section>\r\n      <section v-else>\r\n              <h2>Die Umfrage wurde beendet!</h2>\r\n  \r\n        <!-- Ende und Auswertung der Umfrage, muss eigene Datei UmfragenAuswerten.vue \r\n        <button\r\n        @click=\"umfrageAuswerten()\"\r\n          > \r\n          {{ \r\n            'Umfrage auswerten'\r\n          }}\r\n        </button>\r\n        <div id = \"auswertung\">\r\n        </div>\r\n        -->\r\n          </section>\r\n    </main>\r\n  </template>\r\n  \r\n  <style>\r\n    * {\r\n      margin: 0;\r\n      padding: 0;\r\n      box-sizing: border-box;\r\n      font-family: 'Monsterrat', sans-serif;\r\n    }\r\n    body {\r\n      background-color: #3d1771;\r\n      color: #FFF;\r\n    }\r\n  </style>\r\n  \r\n  <script setup>\r\n    import { ref, computed, onMounted, resolveDirective } from 'vue'\r\n    import {collection, onSnapshot, doc, updateDoc, FieldValue, arrayUnion, getFirestore} from 'firebase/firestore';\r\n  \r\n    import { db } from '@/firebase'\r\n    const questions = ref([{}])\r\n    const umfragenCollectionRef = collection(db,'AlleUmfragen', sessionStorage.getItem('adminBeantworten'), 'Umfragen', sessionStorage.getItem('umfrageBeantworten'), 'Fragen')\r\n    //Wie greife ich auf EMailAdmin zu als normaler User?\r\n    //Wie greife ich auf Umfrage zur Kundenzufriedenheit zu?\r\n    const quizCompleted = ref(false)\r\n    const currentQuestion = ref(0)\r\n    \r\n    onMounted(() => {\r\n      onSnapshot(umfragenCollectionRef, (querySnapshot) => {\r\n      const fbQuestions = []\r\n      querySnapshot.forEach((doc) => {\r\n          const frage = {\r\n            id: doc.id,\r\n            options: doc.data().options,\r\n            question: doc.data().question,\r\n            selected: doc.data().selected,\r\n            selectedLocal: null\r\n          }\r\n          frage.selected.push(null)\r\n          fbQuestions.push(frage)\r\n        })\r\n      questions.value = fbQuestions\r\n      })\r\n    })\r\n    const getCurrentQuestion = computed(() => {\r\n      let question = questions.value[currentQuestion.value]\r\n      question.index = currentQuestion.value\r\n      return question\r\n    })\r\n    const SetAnswer = (e) => {\r\n      questions.value[currentQuestion.value].selectedLocal = e.target.value\r\n      e.target.value = null\r\n      //e.target.value müsste die Option sein, welche man anklickt\r\n    }\r\n  \r\n     async function setSelected (id, auswahl, selectedArray) {\r\n      //Aktualisieren des zwischengespeicherten Arrays mit neuem Wert \r\n      selectedArray[selectedArray.length - 1] = auswahl\r\n      //Dokument in Firebase mit aktualisierem Array überschreuben\r\n      await updateDoc(doc(umfragenCollectionRef, id),{\r\n        selected: selectedArray\r\n      })\r\n    }\r\n    const NextQuestion = () => {\r\n      if (currentQuestion.value < questions.value.length - 1) {\r\n        currentQuestion.value++\r\n        return\r\n      }\r\n      \r\n      quizCompleted.value = true\r\n    }\r\n\r\n  //Die Methoden ab hier müssten in die eigene Datei UmfragenAuswerten.vue\r\n    const countAnswers = () => {\r\n      let len = getCurrentQuestion.value.options.length\r\n      let len2 = getCurrentQuestion.value.selected.length\r\n      let arr = new Array(len)\r\n      for(let x = 0; x < len; x++){\r\n        let count = 0\r\n        for (let i = 0; i < len2; i++) {\r\n          if(getCurrentQuestion.value.selected[i] === x.toString()){\r\n            count++\r\n          } \r\n        }\r\n        arr[x] = count\r\n      }\r\n      return arr\r\n    }\r\n  \r\n    const umfrageAuswerten = () => {\r\n      currentQuestion.value = 0\r\n      let anzahlFragen = questions.value.length\r\n      let ergebnis = []\r\n      let ausgabe = \"\"\r\n      for(let x = 0; x < anzahlFragen; x++){\r\n        let antworten = countAnswers()\r\n        ergebnis.push([...antworten])\r\n        ausgabe = ausgabe + \" <br> <br> Frage \" + (x+1) + \": \"+  getCurrentQuestion.value.question + \"<br>Auswahlmöglichkeiten: \"\r\n        for(let z = 0; z < getCurrentQuestion.value.options.length; z++){\r\n          ausgabe = ausgabe + \"<br>\" +  getCurrentQuestion.value.options[z] + \", Anzahl ausgewählt: \" + ergebnis[x][z]\r\n        }\r\n  \r\n        document.getElementById('auswertung').innerHTML = JSON.stringify(ausgabe)\r\n        NextQuestion()\r\n      }\r\n      currentQuestion.value = 0\r\n      console.log(\"Ergebnis: \", ergebnis)\r\n      return ergebnis\r\n    }\r\n  </script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}