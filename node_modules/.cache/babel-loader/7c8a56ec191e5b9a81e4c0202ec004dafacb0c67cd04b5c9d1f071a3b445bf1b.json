{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, onMounted, resolveDirective } from 'vue';\nimport { collection, onSnapshot, doc, deleteDoc, getDocs, updateDoc, FieldValue, arrayUnion, getFirestore } from 'firebase/firestore';\nimport { db } from '@/firebase';\nexport default {\n  __name: 'UmfragenDetailÜbersicht',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const questions = ref([{}]);\n    const umfragenCollectionRef = collection(db, 'AlleUmfragen', sessionStorage.getItem('EMailAdmin'), 'Umfragen', sessionStorage.getItem('umfrageAuswerten'), 'Fragen');\n    const deleteRef = doc(db, 'AlleUmfragen', sessionStorage.getItem('EMailAdmin'), 'Umfragen', sessionStorage.getItem('umfrageAuswerten'));\n    //Wie greife ich auf EMailAdmin zu als normaler User?\n    //Wie greife ich auf Umfrage zur Kundenzufriedenheit zu?\n    const quizCompleted = ref(false);\n    const currentQuestion = ref(0);\n    onMounted(() => {\n      onSnapshot(umfragenCollectionRef, querySnapshot => {\n        const fbQuestions = [];\n        querySnapshot.forEach(doc => {\n          const frage = {\n            id: doc.id,\n            options: doc.data().options,\n            question: doc.data().question,\n            selected: doc.data().selected,\n            selectedLocal: null\n          };\n          frage.selected.push(null);\n          fbQuestions.push(frage);\n        });\n        questions.value = fbQuestions;\n      });\n    });\n    const getCurrentQuestion = computed(() => {\n      let question = questions.value[currentQuestion.value];\n      question.index = currentQuestion.value;\n      return question;\n    });\n    const NextQuestion = () => {\n      if (currentQuestion.value < questions.value.length - 1) {\n        currentQuestion.value++;\n        return;\n      }\n      quizCompleted.value = true;\n    };\n    const countAnswers = () => {\n      let len = getCurrentQuestion.value.options.length;\n      let len2 = getCurrentQuestion.value.selected.length;\n      let arr = new Array(len);\n      for (let x = 0; x < len; x++) {\n        let count = 0;\n        for (let i = 0; i < len2; i++) {\n          if (getCurrentQuestion.value.selected[i] === x.toString()) {\n            count++;\n          }\n        }\n        arr[x] = count;\n      }\n      return arr;\n    };\n    const umfrageAuswerten = () => {\n      currentQuestion.value = 0;\n      let anzahlFragen = questions.value.length;\n      let ergebnis = [];\n      let ausgabe = \"\";\n      for (let x = 0; x < anzahlFragen; x++) {\n        let antworten = countAnswers();\n        ergebnis.push([...antworten]);\n        ausgabe = ausgabe + \"<br> <br> Frage \" + (x + 1) + \": \" + getCurrentQuestion.value.question + \"<br><br><br>Auswahlmöglichkeiten: \";\n        for (let z = 0; z < getCurrentQuestion.value.options.length; z++) {\n          ausgabe = ausgabe + \"<br>\" + getCurrentQuestion.value.options[z] + \", Anzahl ausgewählt: \" + ergebnis[x][z] + \"<br>\";\n        }\n        document.getElementById('auswertung').innerHTML = ausgabe;\n        \"<br\";\n        NextQuestion();\n      }\n      currentQuestion.value = 0;\n      console.log(\"Ergebnis: \", ergebnis);\n      return ausgabe;\n    };\n    const getName = () => {\n      return sessionStorage.getItem('umfrageAuswerten');\n    };\n    const umfrageLöschen = async () => {\n      const questionSnapshot = await getDocs(umfragenCollectionRef);\n      questionSnapshot.forEach(async doc => {\n        await deleteDoc(doc.ref);\n      });\n      const querySnapshot = await deleteDoc(deleteRef);\n    };\n    const __returned__ = {\n      questions,\n      umfragenCollectionRef,\n      deleteRef,\n      quizCompleted,\n      currentQuestion,\n      getCurrentQuestion,\n      NextQuestion,\n      countAnswers,\n      umfrageAuswerten,\n      getName,\n      umfrageLöschen,\n      ref,\n      computed,\n      onMounted,\n      resolveDirective,\n      get collection() {\n        return collection;\n      },\n      get onSnapshot() {\n        return onSnapshot;\n      },\n      get doc() {\n        return doc;\n      },\n      get deleteDoc() {\n        return deleteDoc;\n      },\n      get getDocs() {\n        return getDocs;\n      },\n      get updateDoc() {\n        return updateDoc;\n      },\n      get FieldValue() {\n        return FieldValue;\n      },\n      get arrayUnion() {\n        return arrayUnion;\n      },\n      get getFirestore() {\n        return getFirestore;\n      },\n      get db() {\n        return db;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","resolveDirective","collection","onSnapshot","doc","deleteDoc","getDocs","updateDoc","FieldValue","arrayUnion","getFirestore","db","questions","umfragenCollectionRef","sessionStorage","getItem","deleteRef","quizCompleted","currentQuestion","querySnapshot","fbQuestions","forEach","frage","id","options","data","question","selected","selectedLocal","push","value","getCurrentQuestion","index","NextQuestion","length","countAnswers","len","len2","arr","Array","x","count","i","toString","umfrageAuswerten","anzahlFragen","ergebnis","ausgabe","antworten","z","document","getElementById","innerHTML","console","log","getName","umfrageLöschen","questionSnapshot"],"sources":["/Users/aleks/Desktop/Git-Projects/Project-2/src/views/UmfragenDetailÜbersicht.vue"],"sourcesContent":["<template>\n  <div class=\"view-main-content\">\n    <div id=\"option-container\">\n    <button class=\"view-main-content-advanceBtn\"\n    @click=\"umfrageAuswerten()\"\n        > \n        {{getName()}}\n        {{ \n        ' auswerten'\n        }}\n    </button>\n\n    <button @click=\"umfrageLöschen(), this.$router.push('/')\" class=\"view-main-content-advanceBtn\" id=\"delete-btn\">\n        {{getName()}} löschen\n    </button>\n  </div>\n\n    <div id=\"auswertung\">\n    </div>\n  </div>\n</template>\n  \n<style scoped>\n.view-main-content {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: space-around;\n}\n\n.view-main-content #option-container {\n  display: flex;\n  flex-direction: row;\n  width: 30%;\n  justify-content: space-around;\n}\n\n.view-main-content #delete-btn:hover {\n  border-color: red;\n  color: red;\n}\n\n.view-main-content #auswertung {\n  align-self: flex-start;\n  padding-left: 4rem;\n}\n\n\n</style>\n  \n<script setup>\n  import { ref, computed, onMounted, resolveDirective } from 'vue'\n  import {collection, onSnapshot, doc, deleteDoc, getDocs, updateDoc, FieldValue, arrayUnion, getFirestore} from 'firebase/firestore';\n\n  import { db } from '@/firebase'\n  const questions = ref([{}])\n  const umfragenCollectionRef = collection(db,'AlleUmfragen', sessionStorage.getItem('EMailAdmin'), 'Umfragen', sessionStorage.getItem('umfrageAuswerten'), 'Fragen')\n  const deleteRef = doc(db,'AlleUmfragen', sessionStorage.getItem('EMailAdmin'), 'Umfragen', sessionStorage.getItem('umfrageAuswerten'))\n  //Wie greife ich auf EMailAdmin zu als normaler User?\n  //Wie greife ich auf Umfrage zur Kundenzufriedenheit zu?\n  const quizCompleted = ref(false)\n  const currentQuestion = ref(0)\n  \n  onMounted(() => {\n    onSnapshot(umfragenCollectionRef, (querySnapshot) => {\n    const fbQuestions = []\n    querySnapshot.forEach((doc) => {\n        const frage = {\n          id: doc.id,\n          options: doc.data().options,\n          question: doc.data().question,\n          selected: doc.data().selected,\n          selectedLocal: null\n        }\n        frage.selected.push(null)\n        fbQuestions.push(frage)\n      })\n    questions.value = fbQuestions\n    })\n  })\n  const getCurrentQuestion = computed(() => {\n    let question = questions.value[currentQuestion.value]\n    question.index = currentQuestion.value\n    return question\n  })\n\n  const NextQuestion = () => {\n    if (currentQuestion.value < questions.value.length - 1) {\n      currentQuestion.value++\n      return\n    }\n    \n    quizCompleted.value = true\n  }\n\n  const countAnswers = () => {\n    let len = getCurrentQuestion.value.options.length\n    let len2 = getCurrentQuestion.value.selected.length\n    let arr = new Array(len)\n    for(let x = 0; x < len; x++){\n      let count = 0\n      for (let i = 0; i < len2; i++) {\n        if(getCurrentQuestion.value.selected[i] === x.toString()){\n          count++\n        } \n      }\n      arr[x] = count\n    }\n    return arr\n  }\n\n  const umfrageAuswerten = () => {\n    currentQuestion.value = 0\n    let anzahlFragen = questions.value.length\n    let ergebnis = []\n    let ausgabe = \"\"\n    for(let x = 0; x < anzahlFragen; x++){\n\n      let antworten = countAnswers()\n      ergebnis.push([...antworten])\n      ausgabe = ausgabe + \"<br> <br> Frage \" + (x+1) + \": \"+  getCurrentQuestion.value.question + \"<br><br><br>Auswahlmöglichkeiten: \"\n      for(let z = 0; z < getCurrentQuestion.value.options.length; z++){\n        ausgabe = ausgabe + \"<br>\" +  getCurrentQuestion.value.options[z] + \", Anzahl ausgewählt: \" + ergebnis[x][z] + \n        \"<br>\"\n      }\n      document.getElementById('auswertung').innerHTML = ausgabe\n      \"<br\"\n      NextQuestion()\n    }\n    currentQuestion.value = 0\n    console.log(\"Ergebnis: \", ergebnis)\n    return ausgabe\n  }\n\n  const getName = () => {\n      return sessionStorage.getItem('umfrageAuswerten')\n  }\n  const umfrageLöschen = async () => {\n      const questionSnapshot = await getDocs(umfragenCollectionRef);\n      questionSnapshot.forEach(async (doc) => {\n          await deleteDoc(doc.ref);\n      });\n      const querySnapshot = await deleteDoc(deleteRef);\n  }\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}