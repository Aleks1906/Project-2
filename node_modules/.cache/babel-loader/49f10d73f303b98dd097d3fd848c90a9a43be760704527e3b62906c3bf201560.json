{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Übersicht aller Umfragen\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"div\", null, _toDisplayString($setup.getAdmins()), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_hoisted_1","_toDisplayString","$setup","getAdmins"],"sources":["/Users/aleks/Desktop/Git-Projects/Project-2/src/views/UmfragenÜbersichtUser.vue"],"sourcesContent":["<template>\n    <h1>Übersicht aller Umfragen</h1>\n\n    <div>\n        {{ getAdmins() }}\n    </div>\n\n</template>\n\n<script setup>\n    import { ref, computed, onMounted, resolveDirective } from 'vue'\n    import {collection, onSnapshot, doc, updateDoc, FieldValue, arrayUnion, getFirestore} from 'firebase/firestore';\n  \n    import { db } from '@/firebase'\n \n    const umfragenCollectionRef = collection(db,'AlleUmfragen')\n\n    const umfrageNamen = ref([])\n\n    let allAdmins = []\n\n    const getAdmins = () => {\n        return umfragenCollectionRef\n    }\n\n    // Zunächst muss die Collection AlleUmfragen aufgerufen werden\n    // dann daraus gibt es ja diverse user, die abgespeichert werden müssen\n    // für jeden user muss man alle Umfragen extrahieren und ausgeben\n\n    // onMounted(() => {\n    // umfragenCollectionRef.get().then((querySnapshot) => {\n    //     const namen = []\n    //     querySnapshot.forEach((doc) => {\n    //     const umfrageName = doc.data().name\n    //     namen.push(umfrageName)\n    //     })\n    //     umfrageNamen.value = namen\n    // })\n    // })\n</script>"],"mappings":";gCACIA,mBAAA,CAAiC,YAA7B,0BAAwB;;;6DAA5BC,UAAiC,EAEjCD,mBAAA,CAEM,aAAAE,gBAAA,CADCC,MAAA,CAAAC,SAAS,mB"},"metadata":{},"sourceType":"module","externalDependencies":[]}