{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Übersicht aller Templates\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Dieses Template enthält folgende Fragen: \", -1 /* HOISTED */);\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.templates, (template, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_createElementVNode(\"h2\", null, _toDisplayString(template), 1 /* TEXT */), _hoisted_2, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.fragen[index], frage => {\n      return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"p\", null, _toDisplayString(frage), 1 /* TEXT */)]);\n    }), 256 /* UNKEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n      onClick: $event => ($setup.createFrageInFirebase(template), this.$router.push('/umfrageWurdeErstellt'))\n    }, \" Dieses Template auswählen \", 8 /* PROPS */, _hoisted_3), _hoisted_4, _createTextVNode(\" --------------------------------------------------------------------- \")]);\n  }), 128 /* KEYED_FRAGMENT */))], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_hoisted_1","_createElementBlock","_Fragment","_renderList","$setup","templates","template","index","key","_toDisplayString","_hoisted_2","fragen","frage","onClick","$event","createFrageInFirebase","$router","push","_hoisted_3","_hoisted_4"],"sources":["/Users/aleks/Desktop/Git-Projects/Project-2/src/views/ErstelleUmfrageAusTemplate.vue"],"sourcesContent":["<template>\n    <h1>Übersicht aller Templates</h1>\n    <div v-for=\"(template, index) in templates\" :key=\"index\">\n        <h2>{{ template }} </h2> \n        <p>Dieses Template enthält folgende Fragen: </p>\n      <div v-for=\"(frage) in fragen[index]\" >\n        <p>\n            {{ frage}}\n         </p>\n      </div>\n      <button @click=\"createFrageInFirebase(template), this.$router.push('/umfrageWurdeErstellt')\">\n          Dieses Template auswählen\n        </button>\n        <br>\n        ---------------------------------------------------------------------\n    </div>\n</template>\n  \n<script setup>\n    import { ref, computed, onMounted, resolveDirective } from 'vue'\n    import {collection, onSnapshot, doc, addDoc, updateDoc, FieldValue, arrayUnion, getFirestore, getDocs} from 'firebase/firestore';\n    import { db } from '@/firebase'\n \n    const templateCollectionRef = collection(db,'Templates')\n\n    const templates = ref([])\n    const fragen = ref([])\n    const hilfeTemplates = ref([])\n\n    onMounted(() => {\n    onSnapshot(templateCollectionRef, (querySnapshot) => {\n      const helperTemplates = []\n      querySnapshot.forEach((doc) => {\n        helperTemplates.push(doc.id)\n      })\n      templates.value = helperTemplates\n\n      templates.value.forEach((template, index) => {\n        const fragenInTemplateRef = collection(db, 'Templates', template, 'Fragen')\n        onSnapshot(fragenInTemplateRef, (querySnapshot) => {\n          const questions = []\n          const helper = []\n          querySnapshot.forEach((doc) => {\n            questions.push(doc.data().question)\n            console.log(doc.data().question)\n          })\n          hilfeTemplates.value[index] = helper\n          fragen.value[index] = questions\n          console.log(fragen.value)\n        })\n      }) \n    })\n  })\n\n\n    const createFrageInFirebase = async (template) => {\n        sessionStorage.setItem('ausgewähltesTemplate', template);\n        const ausgewähltesTemplate = sessionStorage.getItem('ausgewähltesTemplate')\n        const umfragenName = sessionStorage.getItem('umfragenName')\n        const EMailAdmin = sessionStorage.getItem('EMailAdmin')\n\n        const zielRef = collection(db,'AlleUmfragen', EMailAdmin, 'Umfragen', umfragenName, 'Fragen')\n        const quellenRef = collection(db, 'Templates', ausgewähltesTemplate, 'Fragen')\n\n        const querySnapshot = await getDocs(quellenRef)\n        querySnapshot.forEach((doc) => {\n        // create new document in destination collection with same data\n         addDoc(zielRef, doc.data());\n        });\n    }\n</script>"],"mappings":";;gCACIA,mBAAA,CAAkC,YAA9B,2BAAyB;gCAGzBA,mBAAA,CAAgD,WAA7C,2CAAyC;;gCAS5CA,mBAAA,CAAI;;;6DAZRC,UAAkC,G,kBAClCC,mBAAA,CAaMC,SAAA,QAAAC,WAAA,CAb2BC,MAAA,CAAAC,SAAS,GAA7BC,QAAQ,EAAEC,KAAK;yBAA5BN,mBAAA,CAaM;MAbuCO,GAAG,EAAED;IAAK,IACnDR,mBAAA,CAAwB,YAAAU,gBAAA,CAAjBH,QAAQ,kBACfI,UAAgD,G,kBAClDT,mBAAA,CAIMC,SAAA,QAAAC,WAAA,CAJiBC,MAAA,CAAAO,MAAM,CAACJ,KAAK,GAAtBK,KAAK;2BAAlBX,mBAAA,CAIM,cAHJF,mBAAA,CAEK,WAAAU,gBAAA,CADEG,KAAK,iB;sCAGdb,mBAAA,CAEW;MAFFc,OAAK,EAAAC,MAAA,KAAEV,MAAA,CAAAW,qBAAqB,CAACT,QAAQ,QAAQU,OAAO,CAACC,IAAI;OAA2B,6BAE3F,iBAAAC,UAAA,GACAC,UAAI,E,iBAAA,yEAER,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}