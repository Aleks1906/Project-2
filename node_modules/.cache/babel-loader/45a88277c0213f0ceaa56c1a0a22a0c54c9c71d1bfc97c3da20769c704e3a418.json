{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"übersicht\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, \" Derzeit laufende Umfragen, welche von \" + _toDisplayString($setup.nameUserLaden()) + \" erstellt wurden: \", 1 /* TEXT */), _createCommentVNode(\"<button @click=\\\"namenAnzeigen()\\\">Namen anzeigen</button>\"), _hoisted_1], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","id","_toDisplayString","$setup","nameUserLaden","_createCommentVNode","_hoisted_1"],"sources":["/Users/aleks/Desktop/Git-Projects/Project-2/src/views/UmfragenÜbersicht.vue"],"sourcesContent":["<template>\n    <div>\n        Derzeit laufende Umfragen, welche von {{ nameUserLaden() }} erstellt wurden:\n    </div>\n\n    <!--<button @click=\"namenAnzeigen()\">Namen anzeigen</button>-->\n\n    <div id=\"übersicht\"></div>\n</template>\n\n<script setup>\n    import { ref, computed, onMounted, resolveDirective } from 'vue'\n    import {collection, onSnapshot, doc, updateDoc, FieldValue, arrayUnion, getFirestore, QuerySnapshot} from 'firebase/firestore';\n    import { db } from '@/firebase'\n    const nameUserLaden = () => {\n        username = sessionStorage.getItem('EMailAdmin')\n        return username\n    }\n\n    let username = ''\n    const umfragenNamen = ref([])\n    const EMailAdmin = sessionStorage.getItem('EMailAdmin')\n    const umfragenCollectionRef = collection(db,'AlleUmfragen', EMailAdmin, 'Umfragen')\n    //const umfragenCollectionRef2 = collection('AlleUmfragen').doc(sessionStorage.getItem('EMailAdmin'))\n    let namen = []\n \n    onMounted(() => {\n        onSnapshot(umfragenCollectionRef, (querySnapshot) => {\n            console.log(\"UmfragenCollectionRef: \" + umfragenCollectionRef.path)\n            console.log(\"Komme ich hierhin?!\")\n            querySnapshot.forEach((doc) => {\n                namen.push(doc.id)\n                console.log(\"Was ist die doc.id: \" + doc.id)\n            })\n            console.log(\"onMounted aufgerufen?\" + namen[0])\n        })\n        umfragenNamen.value = namen\n    })\n\n    const namenAnzeigen = () => {\n        let ausgabe = 'Test'\n        if(umfragenNamen.value.length != undefined){\n            console.log(\"namenAnzeigen aufgerufen\" + umfragenNamen.value)\n            for (let x = 0; x < umfragenNamen.value.length; x++) {\n                console.log(\"Komme ich hierhin?!!\")\n            ausgabe = ausgabe + '<br>' + umfragenNamen.value[x]\n            }\n        } else {\n            ausgabe = \"Noch keine Umfragen vorhanden.\"\n            console.log(\"Fehler\")\n        }\n        document.getElementById('übersicht').innerHTML = ausgabe\n    }\n</script>"],"mappings":";gCAOIA,mBAAA,CAA0B;EAArBC,EAAE,EAAC;AAAW;;;6DANnBD,mBAAA,CAEM,aAFD,yCACqC,GAAAE,gBAAA,CAAGC,MAAA,CAAAC,aAAa,MAAK,oBAC/D,iBAEAC,mBAAA,8DAA+D,EAE/DC,UAA0B,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}