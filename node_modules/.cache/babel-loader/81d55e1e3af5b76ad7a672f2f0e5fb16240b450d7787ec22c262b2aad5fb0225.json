{"ast":null,"code":"import { ref, computed, onMounted, resolveDirective } from 'vue';\nimport { collection, onSnapshot, doc, updateDoc, FieldValue, arrayUnion, getFirestore } from 'firebase/firestore';\nimport { db } from '@/firebase';\nexport default {\n  __name: 'UmfragenÜbersichtUser',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const umfragenCollectionRef = collection(db, 'AlleUmfragen');\n    const umfrageNamen = ref([]);\n    let allAdmins = [];\n    const getAdmins = () => {\n      console.log(\"UmfragendollectionRef\" + umfragenCollectionRef);\n      document.getElementById('all-admins').innerHTML = umfragenCollectionRef;\n      //return umfragenCollectionRef\n    };\n\n    // Zunächst muss die Collection AlleUmfragen aufgerufen werden\n    // dann daraus gibt es ja diverse user, die abgespeichert werden müssen\n    // für jeden user muss man alle Umfragen extrahieren und ausgeben\n\n    // onMounted(() => {\n    // umfragenCollectionRef.get().then((querySnapshot) => {\n    //     const namen = []\n    //     querySnapshot.forEach((doc) => {\n    //     const umfrageName = doc.data().name\n    //     namen.push(umfrageName)\n    //     })\n    //     umfrageNamen.value = namen\n    // })\n    // })\n\n    const __returned__ = {\n      umfragenCollectionRef,\n      umfrageNamen,\n      get allAdmins() {\n        return allAdmins;\n      },\n      set allAdmins(v) {\n        allAdmins = v;\n      },\n      getAdmins,\n      ref,\n      computed,\n      onMounted,\n      resolveDirective,\n      get collection() {\n        return collection;\n      },\n      get onSnapshot() {\n        return onSnapshot;\n      },\n      get doc() {\n        return doc;\n      },\n      get updateDoc() {\n        return updateDoc;\n      },\n      get FieldValue() {\n        return FieldValue;\n      },\n      get arrayUnion() {\n        return arrayUnion;\n      },\n      get getFirestore() {\n        return getFirestore;\n      },\n      get db() {\n        return db;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","resolveDirective","collection","onSnapshot","doc","updateDoc","FieldValue","arrayUnion","getFirestore","db","umfragenCollectionRef","umfrageNamen","allAdmins","getAdmins","console","log","document","getElementById","innerHTML"],"sources":["/Users/aleks/Desktop/Git-Projects/Project-2/src/views/UmfragenÜbersichtUser.vue"],"sourcesContent":["<template>\n    <h1>Übersicht aller Umfragen</h1>\n\n    <div id=\"all-admins\">\n        {{ getAdmins() }}\n    </div>\n\n</template>\n\n<script setup>\n    import { ref, computed, onMounted, resolveDirective } from 'vue'\n    import {collection, onSnapshot, doc, updateDoc, FieldValue, arrayUnion, getFirestore} from 'firebase/firestore';\n  \n    import { db } from '@/firebase'\n \n    const umfragenCollectionRef = collection(db,'AlleUmfragen')\n\n    const umfrageNamen = ref([])\n\n    let allAdmins = []\n\n    const getAdmins = () => {\n        console.log(\"UmfragendollectionRef\" + umfragenCollectionRef)\n        document.getElementById('all-admins').innerHTML = umfragenCollectionRef\n        //return umfragenCollectionRef\n    }\n\n    // Zunächst muss die Collection AlleUmfragen aufgerufen werden\n    // dann daraus gibt es ja diverse user, die abgespeichert werden müssen\n    // für jeden user muss man alle Umfragen extrahieren und ausgeben\n\n    // onMounted(() => {\n    // umfragenCollectionRef.get().then((querySnapshot) => {\n    //     const namen = []\n    //     querySnapshot.forEach((doc) => {\n    //     const umfrageName = doc.data().name\n    //     namen.push(umfrageName)\n    //     })\n    //     umfrageNamen.value = namen\n    // })\n    // })\n</script>"],"mappings":"AAUI,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,gBAAgB,QAAQ,KAAK;AAChE,SAAQC,UAAU,EAAEC,UAAU,EAAEC,GAAG,EAAEC,SAAS,EAAEC,UAAU,EAAEC,UAAU,EAAEC,YAAY,QAAO,oBAAoB;AAE/G,SAASC,EAAE,QAAQ,YAAY;;;;;;;IAE/B,MAAMC,qBAAqB,GAAGR,UAAU,CAACO,EAAE,EAAC,cAAc,CAAC;IAE3D,MAAME,YAAY,GAAGb,GAAG,CAAC,EAAE,CAAC;IAE5B,IAAIc,SAAS,GAAG,EAAE;IAElB,MAAMC,SAAS,GAAGA,CAAA,KAAM;MACpBC,OAAO,CAACC,GAAG,CAAC,uBAAuB,GAAGL,qBAAqB,CAAC;MAC5DM,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACC,SAAS,GAAGR,qBAAqB;MACvE;IACJ,CAAC;;IAED;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}