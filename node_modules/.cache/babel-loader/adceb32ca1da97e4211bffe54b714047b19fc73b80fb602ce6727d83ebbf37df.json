{"ast":null,"code":"import { ref, computed, onMounted, resolveDirective } from 'vue';\nimport { doc, addDoc, collection, setDoc } from 'firebase/firestore';\nimport { db } from '@/firebase';\nexport default {\n  __name: 'FragenErstellen',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const umfragenCollectionRef = collection(db, 'AlleUmfragen', sessionStorage.getItem('EMailAdmin'), 'Umfragen');\n    const frageFragestellung = ref('');\n    const frageAntwortoptionen = ref('');\n    const addingFrage = ref(false);\n    const addFrage = async () => {\n      addingFrage.value = true;\n      try {\n        console.log(\"\");\n        const umfrageDocRef = doc(umfragenCollectionRef, sessionStorage.getItem('umfragenName'));\n        const fragenCollectionRef = collection(umfrageDocRef, 'Fragen');\n        console.log(\"FragenCollectionRef: \" + fragenCollectionRef);\n        const optionsArray = frageAntwortoptionen.value.split(';').map(option => option.trim());\n        await addDoc(fragenCollectionRef, {\n          question: frageFragestellung.value,\n          options: optionsArray,\n          selected: []\n        });\n      } catch (error) {\n        console.error(error);\n      } finally {\n        addingFrage.value = false;\n      }\n      frageFragestellung.value = '';\n      frageAntwortoptionen.value = '';\n    };\n    /*\n      const addFrage = async () => {\n        const selected = []\n        console.log(\"\")\n        const umfrageDocRef = doc(umfragenCollectionRef, sessionStorage.getItem('umfragenName'))\n            const fragenCollectionRef = collection(umfrageDocRef, 'Fragen')\n            console.log(\"FragenCollectionRef: \" + fragenCollectionRef)\n            await addDoc(fragenCollectionRef, {\n               question: frageFragestellung.value,\n               options: frageAntwortoptionen.value,\n               selected: selected\n            })\n        }\n    */\n    const sessionReset = () => {\n      sessionStorage.removeItem('umfragenName');\n    };\n    const __returned__ = {\n      umfragenCollectionRef,\n      frageFragestellung,\n      frageAntwortoptionen,\n      addingFrage,\n      addFrage,\n      sessionReset,\n      ref,\n      computed,\n      onMounted,\n      resolveDirective,\n      get doc() {\n        return doc;\n      },\n      get addDoc() {\n        return addDoc;\n      },\n      get collection() {\n        return collection;\n      },\n      get setDoc() {\n        return setDoc;\n      },\n      get db() {\n        return db;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","resolveDirective","doc","addDoc","collection","setDoc","db","umfragenCollectionRef","sessionStorage","getItem","frageFragestellung","frageAntwortoptionen","addingFrage","addFrage","value","console","log","umfrageDocRef","fragenCollectionRef","optionsArray","split","map","option","trim","question","options","selected","error","sessionReset","removeItem"],"sources":["/Users/aleks/Desktop/Git-Projects/Project-2/src/views/FragenErstellen.vue"],"sourcesContent":["<template>\n    <div class=\"view-main-content\">\n      <h1 class=\"view-main-content-heading\">Fragen erstellen</h1>\n      <form>\n        <div>\n          <input id=\"fragestellung\" type=\"text\" v-model=\"frageFragestellung\" required placeholder=\"Frage\" class=\"view-main-content-textfield\">\n        </div>\n        \n        <div>\n          <input id=\"antworten\" type=\"text\" v-model=\"frageAntwortoptionen\" required placeholder=\"Antwortoptionen\" class=\"view-main-content-textfield\">\n        </div>\n        <button @click=\"addFrage()\" :disabled=\"addingFrage\" class=\"view-main-content-advanceBtn\">Frage hinzufügen</button>\n      </form>\n\n      <button  @click=\"this.$router.push('/umfrageWurdeErstellt'), sessionReset()\" class=\"view-main-content-advanceBtn\">Fertig (SessionStorage löschen!)</button>\n  </div>\n</template>\n\n<style scoped>\n  .view-main-content form {\n    display: flex;\n    flex-direction: column;\n    width: 35vw;\n  }\n\n  .view-main-content form input {\n    width: 100%;\n  }\n  .view-main-content .view-main-content-advanceBtn {\n    width: 15vw;\n  }\n</style>\n\n<script setup>\n  import { ref, computed, onMounted, resolveDirective } from 'vue'\n  import { doc, addDoc, collection, setDoc} from 'firebase/firestore';\n  import { db } from '@/firebase'\n  const umfragenCollectionRef = collection(db, 'AlleUmfragen', sessionStorage.getItem('EMailAdmin'), 'Umfragen')\n  const frageFragestellung = ref('')\n  const frageAntwortoptionen = ref('')\n  const addingFrage = ref(false)\n\n  const addFrage = async () => {\n    addingFrage.value = true\n    try {\n      console.log(\"\")\n      const umfrageDocRef = doc(umfragenCollectionRef, sessionStorage.getItem('umfragenName'))\n      const fragenCollectionRef = collection(umfrageDocRef, 'Fragen')\n      console.log(\"FragenCollectionRef: \" + fragenCollectionRef)\n      const optionsArray = frageAntwortoptionen.value.split(';').map(option => option.trim());\n      await addDoc(fragenCollectionRef, {\n        question: frageFragestellung.value,\n        options: optionsArray,\n        selected: []\n      })\n    } catch (error) {\n      console.error(error)\n    } finally {\n      addingFrage.value = false\n    }\n    frageFragestellung.value = ''\n    frageAntwortoptionen.value = ''\n  }\n/*\n  const addFrage = async () => {\n    const selected = []\n    console.log(\"\")\n    const umfrageDocRef = doc(umfragenCollectionRef, sessionStorage.getItem('umfragenName'))\n        const fragenCollectionRef = collection(umfrageDocRef, 'Fragen')\n        console.log(\"FragenCollectionRef: \" + fragenCollectionRef)\n        await addDoc(fragenCollectionRef, {\n           question: frageFragestellung.value,\n           options: frageAntwortoptionen.value,\n           selected: selected\n        })\n    }\n*/\n    const sessionReset = () => {\n        sessionStorage.removeItem('umfragenName')\n    }\n    \n</script>"],"mappings":"AAkCE,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,gBAAgB,QAAQ,KAAK;AAChE,SAASC,GAAG,EAAEC,MAAM,EAAEC,UAAU,EAAEC,MAAM,QAAO,oBAAoB;AACnE,SAASC,EAAE,QAAQ,YAAY;;;;;;;IAC/B,MAAMC,qBAAqB,GAAGH,UAAU,CAACE,EAAE,EAAE,cAAc,EAAEE,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC,EAAE,UAAU,CAAC;IAC9G,MAAMC,kBAAkB,GAAGZ,GAAG,CAAC,EAAE,CAAC;IAClC,MAAMa,oBAAoB,GAAGb,GAAG,CAAC,EAAE,CAAC;IACpC,MAAMc,WAAW,GAAGd,GAAG,CAAC,KAAK,CAAC;IAE9B,MAAMe,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3BD,WAAW,CAACE,KAAK,GAAG,IAAI;MACxB,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,EAAE,CAAC;QACf,MAAMC,aAAa,GAAGf,GAAG,CAACK,qBAAqB,EAAEC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC;QACxF,MAAMS,mBAAmB,GAAGd,UAAU,CAACa,aAAa,EAAE,QAAQ,CAAC;QAC/DF,OAAO,CAACC,GAAG,CAAC,uBAAuB,GAAGE,mBAAmB,CAAC;QAC1D,MAAMC,YAAY,GAAGR,oBAAoB,CAACG,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,EAAE,CAAC;QACvF,MAAMpB,MAAM,CAACe,mBAAmB,EAAE;UAChCM,QAAQ,EAAEd,kBAAkB,CAACI,KAAK;UAClCW,OAAO,EAAEN,YAAY;UACrBO,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdZ,OAAO,CAACY,KAAK,CAACA,KAAK,CAAC;MACtB,CAAC,SAAS;QACRf,WAAW,CAACE,KAAK,GAAG,KAAK;MAC3B;MACAJ,kBAAkB,CAACI,KAAK,GAAG,EAAE;MAC7BH,oBAAoB,CAACG,KAAK,GAAG,EAAE;IACjC,CAAC;IACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,MAAMc,YAAY,GAAGA,CAAA,KAAM;MACvBpB,cAAc,CAACqB,UAAU,CAAC,cAAc,CAAC;IAC7C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}