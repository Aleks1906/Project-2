{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, onMounted, resolveDirective } from 'vue';\nimport { collection, onSnapshot, doc, updateDoc, FieldValue, arrayUnion, getFirestore } from 'firebase/firestore';\nimport { db } from '@/firebase';\nexport default {\n  __name: 'UmfragenÜbersichtUser',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const umfragenCollectionRef = collection(db, 'AlleUmfragen');\n    const umfrageNamen = ref([]);\n    const admins = ref([]);\n    const umfragen = ref([]);\n    onMounted(() => {\n      //console.log(\"UmfragendollectionRef\" + umfragenCollectionRef.get())\n      onSnapshot(umfragenCollectionRef, querySnapshot => {\n        const allAdmins = [];\n        // const fbQuestions = []\n        querySnapshot.forEach(doc => {\n          console.log(\"All Aminds \" + doc.id);\n          allAdmins.push(doc.id);\n          console.log(\"allAdmins\" + allAdmins);\n          //     const frage = {\n          //         id: doc.id,\n          //         options: doc.data().options,\n          //         question: doc.data().question,\n          //         selected: doc.data().selected,\n          //         selectedLocal: null\n          //     }\n          //     frage.selected.push(null)\n          //     fbQuestions.push(frage)\n        });\n\n        admins.value = allAdmins;\n        console.log(\"Admins.value \" + admins.value);\n        admins.value.forEach(admin => {\n          const allSurveys = [];\n          const adminCollectionRef = collection(db, 'AlleUmfragen', admin, 'Umfragen');\n          console.log(\"Admincollectionref \" + adminCollectionRef);\n          onSnapshot(adminCollectionRef, querySnapshot => {\n            querySnapshot.forEach(doc => {\n              allSurveys.push(doc.id);\n              umfragen.value = allSurveys;\n            });\n          });\n        });\n        // questions.value = fbQuestions\n      });\n      // return allAdmins\n    });\n\n    // Zunächst muss die Collection AlleUmfragen aufgerufen werden -> erledigt\n    // dann daraus gibt es ja diverse user, die abgespeichert werden müssen -> erledigt\n    // für jeden user muss man alle Umfragen extrahieren und ausgeben\n\n    // onMounted(() => {\n    // umfragenCollectionRef.get().then((querySnapshot) => {\n    //     const namen = []\n    //     querySnapshot.forEach((doc) => {\n    //     const umfrageName = doc.data().name\n    //     namen.push(umfrageName)\n    //     })\n    //     umfrageNamen.value = namen\n    // })\n    // })\n\n    const __returned__ = {\n      umfragenCollectionRef,\n      umfrageNamen,\n      admins,\n      umfragen,\n      ref,\n      computed,\n      onMounted,\n      resolveDirective,\n      get collection() {\n        return collection;\n      },\n      get onSnapshot() {\n        return onSnapshot;\n      },\n      get doc() {\n        return doc;\n      },\n      get updateDoc() {\n        return updateDoc;\n      },\n      get FieldValue() {\n        return FieldValue;\n      },\n      get arrayUnion() {\n        return arrayUnion;\n      },\n      get getFirestore() {\n        return getFirestore;\n      },\n      get db() {\n        return db;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","resolveDirective","collection","onSnapshot","doc","updateDoc","FieldValue","arrayUnion","getFirestore","db","umfragenCollectionRef","umfrageNamen","admins","umfragen","querySnapshot","allAdmins","forEach","console","log","id","push","value","admin","allSurveys","adminCollectionRef"],"sources":["/Users/aleks/Desktop/Git-Projects/Project-2/src/views/UmfragenÜbersichtUser.vue"],"sourcesContent":["<template>\n    <h1>Übersicht aller Umfragen</h1>\n\n    <div v-for=\"umfrage in umfragen\">\n        {{ umfrage }}\n    </div>\n\n</template>\n\n<script setup>\n    import { ref, computed, onMounted, resolveDirective } from 'vue'\n    import {collection, onSnapshot, doc, updateDoc, FieldValue, arrayUnion, getFirestore} from 'firebase/firestore';\n  \n    import { db } from '@/firebase'\n \n    const umfragenCollectionRef = collection(db,'AlleUmfragen')\n\n    const umfrageNamen = ref([])\n\n    const admins = ref([])\n    const umfragen = ref([])\n\n    onMounted(() => {\n        //console.log(\"UmfragendollectionRef\" + umfragenCollectionRef.get())\n        onSnapshot(umfragenCollectionRef, (querySnapshot) => {\n            const allAdmins = []\n        // const fbQuestions = []\n            querySnapshot.forEach((doc) => {\n                \n                console.log(\"All Aminds \" + doc.id)\n                allAdmins.push(doc.id)\n                console.log( \"allAdmins\" + allAdmins)\n            //     const frage = {\n            //         id: doc.id,\n            //         options: doc.data().options,\n            //         question: doc.data().question,\n            //         selected: doc.data().selected,\n            //         selectedLocal: null\n            //     }\n            //     frage.selected.push(null)\n            //     fbQuestions.push(frage)\n            })\n            admins.value = allAdmins\n            console.log(\"Admins.value \" + admins.value)\n            admins.value.forEach((admin) => {\n                const allSurveys = []\n                const adminCollectionRef = collection(db, 'AlleUmfragen', admin, 'Umfragen')\n                console.log(\"Admincollectionref \" + adminCollectionRef)\n                onSnapshot(adminCollectionRef, (querySnapshot) => {\n                    querySnapshot.forEach((doc) => {\n                        allSurveys.push(doc.id)\n                        umfragen.value = allSurveys\n                    })\n                })\n            })\n        // questions.value = fbQuestions\n        })\n        // return allAdmins\n    })\n\n    // Zunächst muss die Collection AlleUmfragen aufgerufen werden -> erledigt\n    // dann daraus gibt es ja diverse user, die abgespeichert werden müssen -> erledigt\n    // für jeden user muss man alle Umfragen extrahieren und ausgeben\n\n    // onMounted(() => {\n    // umfragenCollectionRef.get().then((querySnapshot) => {\n    //     const namen = []\n    //     querySnapshot.forEach((doc) => {\n    //     const umfrageName = doc.data().name\n    //     namen.push(umfrageName)\n    //     })\n    //     umfrageNamen.value = namen\n    // })\n    // })\n</script>"],"mappings":";AAUI,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,gBAAgB,QAAQ,KAAK;AAChE,SAAQC,UAAU,EAAEC,UAAU,EAAEC,GAAG,EAAEC,SAAS,EAAEC,UAAU,EAAEC,UAAU,EAAEC,YAAY,QAAO,oBAAoB;AAE/G,SAASC,EAAE,QAAQ,YAAY;;;;;;;IAE/B,MAAMC,qBAAqB,GAAGR,UAAU,CAACO,EAAE,EAAC,cAAc,CAAC;IAE3D,MAAME,YAAY,GAAGb,GAAG,CAAC,EAAE,CAAC;IAE5B,MAAMc,MAAM,GAAGd,GAAG,CAAC,EAAE,CAAC;IACtB,MAAMe,QAAQ,GAAGf,GAAG,CAAC,EAAE,CAAC;IAExBE,SAAS,CAAC,MAAM;MACZ;MACAG,UAAU,CAACO,qBAAqB,EAAGI,aAAa,IAAK;QACjD,MAAMC,SAAS,GAAG,EAAE;QACxB;QACID,aAAa,CAACE,OAAO,CAAEZ,GAAG,IAAK;UAE3Ba,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGd,GAAG,CAACe,EAAE,CAAC;UACnCJ,SAAS,CAACK,IAAI,CAAChB,GAAG,CAACe,EAAE,CAAC;UACtBF,OAAO,CAACC,GAAG,CAAE,WAAW,GAAGH,SAAS,CAAC;UACzC;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACA,CAAC,CAAC;;QACFH,MAAM,CAACS,KAAK,GAAGN,SAAS;QACxBE,OAAO,CAACC,GAAG,CAAC,eAAe,GAAGN,MAAM,CAACS,KAAK,CAAC;QAC3CT,MAAM,CAACS,KAAK,CAACL,OAAO,CAAEM,KAAK,IAAK;UAC5B,MAAMC,UAAU,GAAG,EAAE;UACrB,MAAMC,kBAAkB,GAAGtB,UAAU,CAACO,EAAE,EAAE,cAAc,EAAEa,KAAK,EAAE,UAAU,CAAC;UAC5EL,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAAGM,kBAAkB,CAAC;UACvDrB,UAAU,CAACqB,kBAAkB,EAAGV,aAAa,IAAK;YAC9CA,aAAa,CAACE,OAAO,CAAEZ,GAAG,IAAK;cAC3BmB,UAAU,CAACH,IAAI,CAAChB,GAAG,CAACe,EAAE,CAAC;cACvBN,QAAQ,CAACQ,KAAK,GAAGE,UAAU;YAC/B,CAAC,CAAC;UACN,CAAC,CAAC;QACN,CAAC,CAAC;QACN;MACA,CAAC,CAAC;MACF;IACJ,CAAC,CAAC;;IAEF;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}