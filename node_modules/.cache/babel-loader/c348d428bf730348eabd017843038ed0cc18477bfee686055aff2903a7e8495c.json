{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, onMounted, resolveDirective } from 'vue';\nimport { collection, onSnapshot, doc, updateDoc, FieldValue, arrayUnion, getFirestore, QuerySnapshot } from 'firebase/firestore';\nimport { db } from '@/firebase';\nexport default {\n  __name: 'UmfragenÜbersicht',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const nameUserLaden = () => {\n      username = sessionStorage.getItem('EMailAdmin');\n      return username;\n    };\n    let username = '';\n    const umfragenNamen = ref([]);\n    const EMailAdmin = sessionStorage.getItem('EMailAdmin');\n    const umfragenCollectionRef = collection(db, 'AlleUmfragen', EMailAdmin, 'Umfragen');\n    //const umfragenCollectionRef2 = collection('AlleUmfragen').doc(sessionStorage.getItem('EMailAdmin'))\n    let namen = [];\n    onMounted(() => {\n      onSnapshot(umfragenCollectionRef, querySnapshot => {\n        console.log(\"UmfragenCollectionRef: \" + umfragenCollectionRef.path);\n        console.log(\"Komme ich hierhin?!\");\n        querySnapshot.forEach(doc => {\n          namen.push(doc.id);\n          console.log(\"Was ist die doc.id: \" + doc.id);\n        });\n        console.log(\"onMounted aufgerufen?\" + namen[0]);\n      });\n      umfragenNamen.value = namen;\n      namenAnzeigen();\n    });\n    const namenAnzeigen = () => {\n      let ausgabe = '';\n      if (umfragenNamen.value.length != undefined) {\n        console.log(\"namenAnzeigen aufgerufen\" + umfragenNamen.value);\n        for (let x = 0; x < umfragenNamen.value.length; x++) {\n          console.log(\"Komme ich hierhin?!!\");\n          ausgabe = ausgabe + '<br>' + umfragenNamen.value[x];\n        }\n      } else {\n        ausgabe = \"Noch keine Umfragen vorhanden.\";\n        console.log(\"Fehler\");\n      }\n      document.getElementById('übersicht').innerHTML = ausgabe;\n    };\n    const __returned__ = {\n      nameUserLaden,\n      get username() {\n        return username;\n      },\n      set username(v) {\n        username = v;\n      },\n      umfragenNamen,\n      EMailAdmin,\n      umfragenCollectionRef,\n      get namen() {\n        return namen;\n      },\n      set namen(v) {\n        namen = v;\n      },\n      namenAnzeigen,\n      ref,\n      computed,\n      onMounted,\n      resolveDirective,\n      get collection() {\n        return collection;\n      },\n      get onSnapshot() {\n        return onSnapshot;\n      },\n      get doc() {\n        return doc;\n      },\n      get updateDoc() {\n        return updateDoc;\n      },\n      get FieldValue() {\n        return FieldValue;\n      },\n      get arrayUnion() {\n        return arrayUnion;\n      },\n      get getFirestore() {\n        return getFirestore;\n      },\n      get QuerySnapshot() {\n        return QuerySnapshot;\n      },\n      get db() {\n        return db;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","resolveDirective","collection","onSnapshot","doc","updateDoc","FieldValue","arrayUnion","getFirestore","QuerySnapshot","db","nameUserLaden","username","sessionStorage","getItem","umfragenNamen","EMailAdmin","umfragenCollectionRef","namen","querySnapshot","console","log","path","forEach","push","id","value","namenAnzeigen","ausgabe","length","undefined","x","document","getElementById","innerHTML"],"sources":["/Users/aleks/Desktop/Git-Projects/Project-2/src/views/UmfragenÜbersicht.vue"],"sourcesContent":["<template>\n    <div>\n        Derzeit laufende Umfragen, welche von {{ nameUserLaden() }} erstellt wurden:\n    </div>\n\n    <!--<button @click=\"namenAnzeigen()\">Namen anzeigen</button>-->\n\n    <div id=\"übersicht\"> {{ namenAnzeigen()}}</div>\n</template>\n\n<script setup>\n    import { ref, computed, onMounted, resolveDirective } from 'vue'\n    import {collection, onSnapshot, doc, updateDoc, FieldValue, arrayUnion, getFirestore, QuerySnapshot} from 'firebase/firestore';\n    import { db } from '@/firebase'\n    const nameUserLaden = () => {\n        username = sessionStorage.getItem('EMailAdmin')\n        return username\n    }\n\n    let username = ''\n    const umfragenNamen = ref([])\n    const EMailAdmin = sessionStorage.getItem('EMailAdmin')\n    const umfragenCollectionRef = collection(db,'AlleUmfragen', EMailAdmin, 'Umfragen')\n    //const umfragenCollectionRef2 = collection('AlleUmfragen').doc(sessionStorage.getItem('EMailAdmin'))\n    let namen = []\n \n    onMounted(() => {\n        onSnapshot(umfragenCollectionRef, (querySnapshot) => {\n            console.log(\"UmfragenCollectionRef: \" + umfragenCollectionRef.path)\n            console.log(\"Komme ich hierhin?!\")\n            querySnapshot.forEach((doc) => {\n                namen.push(doc.id)\n                console.log(\"Was ist die doc.id: \" + doc.id)\n            })\n            console.log(\"onMounted aufgerufen?\" + namen[0])\n        })\n        umfragenNamen.value = namen\n        namenAnzeigen()\n    })\n\n    const namenAnzeigen = () => {\n        let ausgabe = ''\n        if(umfragenNamen.value.length != undefined){\n            console.log(\"namenAnzeigen aufgerufen\" + umfragenNamen.value)\n            for (let x = 0; x < umfragenNamen.value.length; x++) {\n                console.log(\"Komme ich hierhin?!!\")\n            ausgabe = ausgabe + '<br>' + umfragenNamen.value[x]\n            }\n        } else {\n            ausgabe = \"Noch keine Umfragen vorhanden.\"\n            console.log(\"Fehler\")\n        }\n        document.getElementById('übersicht').innerHTML = ausgabe\n    }\n</script>"],"mappings":";AAWI,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,gBAAgB,QAAQ,KAAK;AAChE,SAAQC,UAAU,EAAEC,UAAU,EAAEC,GAAG,EAAEC,SAAS,EAAEC,UAAU,EAAEC,UAAU,EAAEC,YAAY,EAAEC,aAAa,QAAO,oBAAoB;AAC9H,SAASC,EAAE,QAAQ,YAAY;;;;;;;IAC/B,MAAMC,aAAa,GAAGA,CAAA,KAAM;MACxBC,QAAQ,GAAGC,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC;MAC/C,OAAOF,QAAQ;IACnB,CAAC;IAED,IAAIA,QAAQ,GAAG,EAAE;IACjB,MAAMG,aAAa,GAAGjB,GAAG,CAAC,EAAE,CAAC;IAC7B,MAAMkB,UAAU,GAAGH,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC;IACvD,MAAMG,qBAAqB,GAAGf,UAAU,CAACQ,EAAE,EAAC,cAAc,EAAEM,UAAU,EAAE,UAAU,CAAC;IACnF;IACA,IAAIE,KAAK,GAAG,EAAE;IAEdlB,SAAS,CAAC,MAAM;MACZG,UAAU,CAACc,qBAAqB,EAAGE,aAAa,IAAK;QACjDC,OAAO,CAACC,GAAG,CAAC,yBAAyB,GAAGJ,qBAAqB,CAACK,IAAI,CAAC;QACnEF,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QAClCF,aAAa,CAACI,OAAO,CAAEnB,GAAG,IAAK;UAC3Bc,KAAK,CAACM,IAAI,CAACpB,GAAG,CAACqB,EAAE,CAAC;UAClBL,OAAO,CAACC,GAAG,CAAC,sBAAsB,GAAGjB,GAAG,CAACqB,EAAE,CAAC;QAChD,CAAC,CAAC;QACFL,OAAO,CAACC,GAAG,CAAC,uBAAuB,GAAGH,KAAK,CAAC,CAAC,CAAC,CAAC;MACnD,CAAC,CAAC;MACFH,aAAa,CAACW,KAAK,GAAGR,KAAK;MAC3BS,aAAa,EAAE;IACnB,CAAC,CAAC;IAEF,MAAMA,aAAa,GAAGA,CAAA,KAAM;MACxB,IAAIC,OAAO,GAAG,EAAE;MAChB,IAAGb,aAAa,CAACW,KAAK,CAACG,MAAM,IAAIC,SAAS,EAAC;QACvCV,OAAO,CAACC,GAAG,CAAC,0BAA0B,GAAGN,aAAa,CAACW,KAAK,CAAC;QAC7D,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,aAAa,CAACW,KAAK,CAACG,MAAM,EAAEE,CAAC,EAAE,EAAE;UACjDX,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;UACvCO,OAAO,GAAGA,OAAO,GAAG,MAAM,GAAGb,aAAa,CAACW,KAAK,CAACK,CAAC,CAAC;QACnD;MACJ,CAAC,MAAM;QACHH,OAAO,GAAG,gCAAgC;QAC1CR,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACzB;MACAW,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,SAAS,GAAGN,OAAO;IAC5D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}