{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Übersicht aller Umfragen\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.umfragen, umfragenarray => {\n    return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(umfragenarray, umfrage => {\n      return _openBlock(), _createElementBlock(\"div\", null, _toDisplayString(umfrage), 1 /* TEXT */);\n    }), 256 /* UNKEYED_FRAGMENT */))]);\n  }), 256 /* UNKEYED_FRAGMENT */))], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_hoisted_1","_createElementBlock","_Fragment","_renderList","$setup","umfragen","umfragenarray","umfrage","_toDisplayString"],"sources":["/Users/aleks/Desktop/Git-Projects/Project-2/src/views/UmfragenÜbersichtUser.vue"],"sourcesContent":["<template>\n    <h1>Übersicht aller Umfragen</h1>\n\n    <div v-for=\"umfragenarray in umfragen\">\n        <div v-for=\"umfrage in umfragenarray\">\n            {{ umfrage }}\n        </div>\n    </div>\n\n</template>\n\n<script setup>\n    import { ref, computed, onMounted, resolveDirective } from 'vue'\n    import {collection, onSnapshot, doc, updateDoc, FieldValue, arrayUnion, getFirestore} from 'firebase/firestore';\n    import { db } from '@/firebase'\n \n    const umfragenCollectionRef = collection(db,'AlleUmfragen')\n    const admins = ref([])\n    const umfragen = ref([])\n\n    onMounted(() => {\n        onSnapshot(umfragenCollectionRef, (querySnapshot) => {\n            const allAdmins = []\n            querySnapshot.forEach((doc) => {\n                \n                console.log(\"All Aminds \" + doc.id)\n                allAdmins.push(doc.id)\n                console.log( \"allAdmins\" + allAdmins)\n            })\n            admins.value = allAdmins\n            console.log(\"Admins.value \" + admins.value)\n            admins.value.forEach((admin) => {\n                const allSurveys = []\n                const adminCollectionRef = collection(db, 'AlleUmfragen', admin, 'Umfragen')\n                console.log(\"Admincollectionref \" + adminCollectionRef)\n                onSnapshot(adminCollectionRef, (querySnapshot) => {\n                    querySnapshot.forEach((doc) => {\n                        allSurveys.push(doc.id)\n                        \n                    })\n                    umfragen.value.push(allSurveys)\n                })\n            })\n            console.log(\"Umfragen.value.length \" + umfragen.value[0])\n            if(umfragen.value.length > 0){\n                console.log(\"Passiert hier was?\")\n                location.reload()\n            }\n        })\n    })\n</script>"],"mappings":";gCACIA,mBAAA,CAAiC,YAA7B,0BAAwB;;;6DAA5BC,UAAiC,G,kBAEjCC,mBAAA,CAIMC,SAAA,QAAAC,WAAA,CAJuBC,MAAA,CAAAC,QAAQ,EAAzBC,aAAa;yBAAzBL,mBAAA,CAIM,e,kBAHFA,mBAAA,CAEMC,SAAA,QAAAC,WAAA,CAFiBG,aAAa,EAAxBC,OAAO;2BAAnBN,mBAAA,CAEM,aAAAO,gBAAA,CADCD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}