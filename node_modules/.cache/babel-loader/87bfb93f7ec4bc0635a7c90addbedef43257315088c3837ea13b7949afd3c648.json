{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelRadio as _vModelRadio, withDirectives as _withDirectives, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Umfrage Kundenzufriedenheit\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  key: 0,\n  class: \"quiz\"\n};\nconst _hoisted_4 = {\n  class: \"quiz-info\"\n};\nconst _hoisted_5 = {\n  class: \"question\"\n};\nconst _hoisted_6 = {\n  class: \"options\"\n};\nconst _hoisted_7 = [\"for\"];\nconst _hoisted_8 = [\"id\", \"name\", \"value\", \"disabled\"];\nconst _hoisted_9 = [\"disabled\"];\nconst _hoisted_10 = {\n  key: 1\n};\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Die Umfrage wurde beendet!\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"main\", _hoisted_1, [_hoisted_2, !$setup.quizCompleted ? (_openBlock(), _createElementBlock(\"section\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"span\", _hoisted_5, _toDisplayString($setup.getCurrentQuestion.question), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.getCurrentQuestion.options, (option, index) => {\n    return _openBlock(), _createElementBlock(\"label\", {\n      for: 'option' + index,\n      class: _normalizeClass(`option ${$setup.getCurrentQuestion.selected[$setup.getCurrentQuestion.selected.length - 1] != null && index != $setup.getCurrentQuestion.selected[$setup.getCurrentQuestion.selected.length - 1] ? 'disabled' : ''}`)\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"radio\",\n      id: 'option' + index,\n      name: $setup.getCurrentQuestion.index,\n      value: index,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.getCurrentQuestion.selected[$setup.getCurrentQuestion.selected.length - 1] = $event),\n      disabled: $setup.getCurrentQuestion.selected[$setup.getCurrentQuestion.selected.length - 1],\n      onChange: $setup.SetAnswer\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_8), [[_vModelRadio, $setup.getCurrentQuestion.selected[$setup.getCurrentQuestion.selected.length - 1]]]), _createElementVNode(\"span\", null, _toDisplayString(option), 1 /* TEXT */)], 10 /* CLASS, PROPS */, _hoisted_7);\n  }), 256 /* UNKEYED_FRAGMENT */))])]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => ($setup.setSelected($setup.getCurrentQuestion.id, $setup.getCurrentQuestion.selectedLocal, $setup.getCurrentQuestion.selected), $setup.NextQuestion())),\n    disabled: $setup.getCurrentQuestion.selectedLocal == null\n  }, _toDisplayString($setup.getCurrentQuestion.index == $setup.questions.length - 1 ? 'Finish' : $setup.getCurrentQuestion.selectedLocal == null ? 'Select an option' : 'Next question'), 9 /* TEXT, PROPS */, _hoisted_9), _createCommentVNode(\" <h3>{{ getCurrentQuestion.selected }}</h3> \")])) : (_openBlock(), _createElementBlock(\"section\", _hoisted_10, [_hoisted_11, _createCommentVNode(\" Ende und Auswertung der Umfrage, muss eigene Datei UmfragenAuswerten.vue \\r\\n        <button\\r\\n        @click=\\\"umfrageAuswerten()\\\"\\r\\n          > \\r\\n          {{ \\r\\n            'Umfrage auswerten'\\r\\n          }}\\r\\n        </button>\\r\\n        <div id = \\\"auswertung\\\">\\r\\n        </div>\\r\\n        \")]))]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","$setup","quizCompleted","_hoisted_3","_hoisted_4","_hoisted_5","_toDisplayString","getCurrentQuestion","question","_hoisted_6","_Fragment","_renderList","options","option","index","for","_normalizeClass","selected","length","type","id","name","value","$event","disabled","onChange","SetAnswer","onClick","_cache","setSelected","selectedLocal","NextQuestion","questions","_createCommentVNode","_hoisted_10","_hoisted_11"],"sources":["/Users/aleks/Desktop/Git-Projects/Project-2/src/views/BeantwortenView.vue"],"sourcesContent":["<template>\r\n    <main class=\"app\">\r\n      <h1>Umfrage Kundenzufriedenheit</h1>\r\n      <section class=\"quiz\" v-if=\"!quizCompleted\">\r\n        <div class = \"quiz-info\">\r\n          <span class=\"question\">\r\n             {{ getCurrentQuestion.question }} \r\n          </span>\r\n          <div class=\"options\">\r\n            \r\n            <label \r\n                      v-for=\"(option, index) in getCurrentQuestion.options\" \r\n                      :for=\"'option' + index\" \r\n                      :class=\"`option ${\r\n                          getCurrentQuestion.selected[getCurrentQuestion.selected.length - 1] != null &&\r\n                          index != getCurrentQuestion.selected[getCurrentQuestion.selected.length - 1]\r\n                              ? 'disabled'\r\n                              : ''\r\n                      }`\">\r\n                      <input \r\n                          type=\"radio\" \r\n                          :id=\"'option' + index\" \r\n                          :name=\"getCurrentQuestion.index\" \r\n                          :value=\"index\" \r\n                          v-model=\"getCurrentQuestion.selected[getCurrentQuestion.selected.length - 1]\" \r\n                          :disabled=\"getCurrentQuestion.selected[getCurrentQuestion.selected.length - 1]\"\r\n                          @change=\"SetAnswer\" \r\n                      />\r\n                      <span>{{ option }}</span>\r\n                  </label>\r\n          </div>\r\n        </div>\r\n  \r\n        <button \r\n                  @click=\"setSelected(getCurrentQuestion.id, getCurrentQuestion.selectedLocal, getCurrentQuestion.selected), NextQuestion()\" \r\n                  :disabled=\"getCurrentQuestion.selectedLocal == null\">\r\n                  {{ \r\n                      getCurrentQuestion.index == questions.length - 1 \r\n                          ? 'Finish' \r\n                          : getCurrentQuestion.selectedLocal == null\r\n                              ? 'Select an option'\r\n                              : 'Next question'\r\n                  }}\r\n              </button>\r\n        <!-- <h3>{{ getCurrentQuestion.selected }}</h3> -->\r\n      </section>\r\n      <section v-else>\r\n              <h2>Die Umfrage wurde beendet!</h2>\r\n  \r\n        <!-- Ende und Auswertung der Umfrage, muss eigene Datei UmfragenAuswerten.vue \r\n        <button\r\n        @click=\"umfrageAuswerten()\"\r\n          > \r\n          {{ \r\n            'Umfrage auswerten'\r\n          }}\r\n        </button>\r\n        <div id = \"auswertung\">\r\n        </div>\r\n        -->\r\n          </section>\r\n    </main>\r\n  </template>\r\n  \r\n  <style>\r\n    * {\r\n      margin: 0;\r\n      padding: 0;\r\n      box-sizing: border-box;\r\n      font-family: 'Monsterrat', sans-serif;\r\n    }\r\n    body {\r\n      background-color: #3d1771;\r\n      color: #FFF;\r\n    }\r\n  </style>\r\n  \r\n  <script setup>\r\n    import { ref, computed, onMounted, resolveDirective } from 'vue'\r\n    import {collection, onSnapshot, doc, updateDoc, FieldValue, arrayUnion, getFirestore} from 'firebase/firestore';\r\n  \r\n    import { db } from '@/firebase'\r\n    const questions = ref([{}])\r\n    const umfragenCollectionRef = collection(db,'AlleUmfragen', sessionStorage.getItem('adminBeantworten'), 'Umfragen', sessionStorage.getItem('umfrageBeantworten'), 'Fragen')\r\n    //Wie greife ich auf EMailAdmin zu als normaler User?\r\n    //Wie greife ich auf Umfrage zur Kundenzufriedenheit zu?\r\n    const quizCompleted = ref(false)\r\n    const currentQuestion = ref(0)\r\n    \r\n    onMounted(() => {\r\n      onSnapshot(umfragenCollectionRef, (querySnapshot) => {\r\n      const fbQuestions = []\r\n      querySnapshot.forEach((doc) => {\r\n          const frage = {\r\n            id: doc.id,\r\n            options: doc.data().options,\r\n            question: doc.data().question,\r\n            selected: doc.data().selected,\r\n            selectedLocal: null\r\n          }\r\n          frage.selected.push(null)\r\n          fbQuestions.push(frage)\r\n        })\r\n      questions.value = fbQuestions\r\n      })\r\n    })\r\n    const getCurrentQuestion = computed(() => {\r\n      let question = questions.value[currentQuestion.value]\r\n      question.index = currentQuestion.value\r\n      return question\r\n    })\r\n    const SetAnswer = (e) => {\r\n      questions.value[currentQuestion.value].selectedLocal = e.target.value\r\n      e.target.value = null\r\n      //e.target.value müsste die Option sein, welche man anklickt\r\n    }\r\n  \r\n     async function setSelected (id, auswahl, selectedArray) {\r\n      //Aktualisieren des zwischengespeicherten Arrays mit neuem Wert \r\n      selectedArray[selectedArray.length - 1] = auswahl\r\n      //Dokument in Firebase mit aktualisierem Array überschreuben\r\n      await updateDoc(doc(umfragenCollectionRef, id),{\r\n        selected: selectedArray\r\n      })\r\n    }\r\n    const NextQuestion = () => {\r\n      if (currentQuestion.value < questions.value.length - 1) {\r\n        currentQuestion.value++\r\n        return\r\n      }\r\n      \r\n      quizCompleted.value = true\r\n    }\r\n\r\n  //Die Methoden ab hier müssten in die eigene Datei UmfragenAuswerten.vue\r\n    const countAnswers = () => {\r\n      let len = getCurrentQuestion.value.options.length\r\n      let len2 = getCurrentQuestion.value.selected.length\r\n      let arr = new Array(len)\r\n      for(let x = 0; x < len; x++){\r\n        let count = 0\r\n        for (let i = 0; i < len2; i++) {\r\n          if(getCurrentQuestion.value.selected[i] === x.toString()){\r\n            count++\r\n          } \r\n        }\r\n        arr[x] = count\r\n      }\r\n      return arr\r\n    }\r\n  \r\n    const umfrageAuswerten = () => {\r\n      currentQuestion.value = 0\r\n      let anzahlFragen = questions.value.length\r\n      let ergebnis = []\r\n      let ausgabe = \"\"\r\n      for(let x = 0; x < anzahlFragen; x++){\r\n        let antworten = countAnswers()\r\n        ergebnis.push([...antworten])\r\n        ausgabe = ausgabe + \" <br> <br> Frage \" + (x+1) + \": \"+  getCurrentQuestion.value.question + \"<br>Auswahlmöglichkeiten: \"\r\n        for(let z = 0; z < getCurrentQuestion.value.options.length; z++){\r\n          ausgabe = ausgabe + \"<br>\" +  getCurrentQuestion.value.options[z] + \", Anzahl ausgewählt: \" + ergebnis[x][z]\r\n        }\r\n  \r\n        document.getElementById('auswertung').innerHTML = JSON.stringify(ausgabe)\r\n        NextQuestion()\r\n      }\r\n      currentQuestion.value = 0\r\n      console.log(\"Ergebnis: \", ergebnis)\r\n      return ergebnis\r\n    }\r\n  </script>"],"mappings":";;EACUA,KAAK,EAAC;AAAK;gCACfC,mBAAA,CAAoC,YAAhC,6BAA2B;;;EACtBD,KAAK,EAAC;;;EACRA,KAAK,EAAG;AAAW;;EAChBA,KAAK,EAAC;AAAU;;EAGjBA,KAAK,EAAC;AAAS;;;;;;;iCAuChBC,mBAAA,CAAmC,YAA/B,4BAA0B;;;uBA9CxCC,mBAAA,CA4DO,QA5DPC,UA4DO,GA3DLC,UAAoC,E,CACPC,MAAA,CAAAC,aAAa,I,cAA1CJ,mBAAA,CA0CU,WA1CVK,UA0CU,GAzCRN,mBAAA,CA2BM,OA3BNO,UA2BM,GA1BJP,mBAAA,CAEO,QAFPQ,UAEO,EAAAC,gBAAA,CADDL,MAAA,CAAAM,kBAAkB,CAACC,QAAQ,kBAEjCX,mBAAA,CAsBM,OAtBNY,UAsBM,I,kBApBJX,mBAAA,CAmBcY,SAAA,QAAAC,WAAA,CAlBsBV,MAAA,CAAAM,kBAAkB,CAACK,OAAO,GAA5CC,MAAM,EAAEC,KAAK;yBAD/BhB,mBAAA,CAmBc;MAjBHiB,GAAG,aAAaD,KAAK;MACrBlB,KAAK,EAAAoB,eAAA,WAAwCf,MAAA,CAAAM,kBAAkB,CAACU,QAAQ,CAAChB,MAAA,CAAAM,kBAAkB,CAACU,QAAQ,CAACC,MAAM,iBAA4CJ,KAAK,IAAIb,MAAA,CAAAM,kBAAkB,CAACU,QAAQ,CAAChB,MAAA,CAAAM,kBAAkB,CAACU,QAAQ,CAACC,MAAM,Q;wBAM/NrB,mBAAA,CAQE;MAPEsB,IAAI,EAAC,OAAO;MACXC,EAAE,aAAaN,KAAK;MACpBO,IAAI,EAAEpB,MAAA,CAAAM,kBAAkB,CAACO,KAAK;MAC9BQ,KAAK,EAAER,KAAK;iEACJb,MAAA,CAAAM,kBAAkB,CAACU,QAAQ,CAAChB,MAAA,CAAAM,kBAAkB,CAACU,QAAQ,CAACC,MAAM,QAAAK,MAAA;MACtEC,QAAQ,EAAEvB,MAAA,CAAAM,kBAAkB,CAACU,QAAQ,CAAChB,MAAA,CAAAM,kBAAkB,CAACU,QAAQ,CAACC,MAAM;MACxEO,QAAM,EAAExB,MAAA,CAAAyB;0EAFAzB,MAAA,CAAAM,kBAAkB,CAACU,QAAQ,CAAChB,MAAA,CAAAM,kBAAkB,CAACU,QAAQ,CAACC,MAAM,O,GAI3ErB,mBAAA,CAAyB,cAAAS,gBAAA,CAAhBO,MAAM,iB;wCAK7BhB,mBAAA,CAUe;IATJ8B,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAL,MAAA,KAAEtB,MAAA,CAAA4B,WAAW,CAAC5B,MAAA,CAAAM,kBAAkB,CAACa,EAAE,EAAEnB,MAAA,CAAAM,kBAAkB,CAACuB,aAAa,EAAE7B,MAAA,CAAAM,kBAAkB,CAACU,QAAQ,GAAGhB,MAAA,CAAA8B,YAAY;IACtHP,QAAQ,EAAEvB,MAAA,CAAAM,kBAAkB,CAACuB,aAAa;sBAEvC7B,MAAA,CAAAM,kBAAkB,CAACO,KAAK,IAAIb,MAAA,CAAA+B,SAAS,CAACd,MAAM,O,WAA0EjB,MAAA,CAAAM,kBAAkB,CAACuB,aAAa,W,yEAOpKG,mBAAA,gDAAmD,C,oBAErDnC,mBAAA,CAcc,WAAAoC,WAAA,GAbNC,WAAmC,EAEzCF,mBAAA,sTAUG,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}